name: BDD Test Runner

on:
  workflow_dispatch:
    inputs:
      test_environment:
        description: 'Test environment to run against'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
  push:
    branches: [ main, develop ]
    paths:
    - 'test_cases/**'
    - '.github/workflows/test-runner.yml'
  pull_request:
    branches: [ main ]
    paths:
    - 'test_cases/**'

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      test-files: ${{ steps.find-tests.outputs.files }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Find test files
      id: find-tests
      run: |
        TEST_FILES=$(find test_cases -name "*.feature" -o -name "*.yml" | tr '\n' ' ')
        echo "files=$TEST_FILES" >> $GITHUB_OUTPUT
        echo "Found test files: $TEST_FILES"

  run-bdd-tests:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install behave pytest selenium requests beautifulsoup4
        
    - name: Install Playwright browsers
      run: |
        playwright install chromium
        playwright install-deps
        
    - name: Run BDD tests
      run: |
        echo "Running BDD tests with Python ${{ matrix.python-version }}"
        if [ -n "${{ needs.setup.outputs.test-files }}" ]; then
          for file in ${{ needs.setup.outputs.test-files }}; do
            if [[ $file == *.feature ]]; then
              echo "Running feature file: $file"
              behave $file --format=json --outfile=test-results-${{ matrix.python-version }}.json
            fi
          done
        else
          echo "No test files found"
        fi
      continue-on-error: true
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: test-results-${{ matrix.python-version }}.json

  docker-test:
    needs: setup
    runs-on: ubuntu-latest
    if: needs.setup.outputs.test-files != ''
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v4
      
    - name: Build test container
      run: |
        docker build -t bdd-test-runner -f Dockerfile.test .
        
    - name: Run tests in Docker
      run: |
        docker run --rm bdd-test-runner behave test_cases/ --format=json --outfile=docker-test-results.json
        
    - name: Upload Docker test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: docker-test-results
        path: docker-test-results.json

  test-report:
    needs: [run-bdd-tests, docker-test]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download test results
      uses: actions/download-artifact@v4
      with:
        path: test-results
        
    - name: Generate test report
      run: |
        echo "## BDD Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        for result_file in test-results/*.json; do
          if [ -f "$result_file" ]; then
            echo "### $(basename $result_file .json)" >> $GITHUB_STEP_SUMMARY
            python -c "import json; import sys; data = json.load(open('$result_file', 'r')); total = len(data); passed = sum(1 for test in data if test.get('status') == 'passed'); failed = total - passed; print(f'- Total tests: {total}'); print(f'- Passed: {passed}'); print(f'- Failed: {failed}'); print(f'- Success rate: {(passed/total*100):.1f}%')" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
        done
        
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let summary = '';
          try {
            summary = fs.readFileSync(process.env.GITHUB_STEP_SUMMARY, 'utf8');
          } catch (e) {
            summary = 'Test results could not be generated';
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });

  notify:
    needs: [test-report]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify on failure
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'BDD Tests Failed',
            body: 'Some BDD tests have failed. Please check the test results.',
            labels: ['bug', 'test-failure']
          });
          
    - name: Notify on success
      if: success()
      uses: actions/github-script@v7
      with:
        script: |
          console.log('All BDD tests passed successfully!'); 